name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.14", "3.15"]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        run: pip install poetry
      - name: Dependency compatibility survey
        run: >-
          python -m scripts.dependency_matrix survey
          --config presets/dependency_targets.toml
          --output tools/dependency_matrix/report.json
      - name: Dependency blocker guard
        run: >-
          python -m scripts.dependency_matrix guard
          --config presets/dependency_targets.toml
          --blockers presets/dependency_blockers.toml
          --status-output tools/dependency_matrix/status.json
          --strict
      - name: Cache Poetry environments
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-
      - name: Install dependencies
        run: poetry install --no-root
      - name: Run isort check
        run: poetry run isort --profile black --check-only .
      - name: Run black check
        run: poetry run black --check .
      - name: Run pre-commit
        run: poetry run pre-commit run --all-files --show-diff-on-failure
      - name: Run tests
        run: >-
          poetry run pytest --maxfail=5 --disable-warnings --cov=firecrawl_demo
          --cov-report=term-missing --cov-report=xml:coverage.xml --junitxml=pytest-results.xml
      - name: Validate wheel contents
        run: poetry run python -m scripts.validate_wheel
      - name: Aggregate Problems Report
        run: poetry run python scripts/collect_problems.py
      - name: Generate CI summary
        run: |
          poetry run python -m scripts.ci_summary \
            --coverage coverage.xml \
            --junit pytest-results.xml \
            --output ci-summary.md \
            --json ci-dashboard.json
          cat ci-summary.md >> "$GITHUB_STEP_SUMMARY"
      - name: Upload CI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-dashboards
          path: |
            coverage.xml
            pytest-results.xml
            ci-summary.md
            ci-dashboard.json
            problems_report.json
            tools/dependency_matrix/report.json
            tools/dependency_matrix/status.json
      - name: Install Node.js and markdownlint-cli2
        uses: actions/setup-node@v6
        with:
          node-version: "22"
      - name: Install markdownlint-cli2
        run: npm install --no-save markdownlint-cli2@^0.9.0
      - name: Install yaml (dependency for markdownlint-cli2)
        run: npm install yaml
      - name: Lint Markdown
        run: npx markdownlint-cli2 '**/*.md' '#node_modules' || true
      - name: Install Hadolint
        run: |
          HADOLINT_URL="https://github.com/hadolint/hadolint/releases/latest/download/hadolint-$(uname -s)-$(uname -m)"
          wget -O /usr/local/bin/hadolint "$HADOLINT_URL"
          chmod +x /usr/local/bin/hadolint
      - name: Lint Dockerfiles with Hadolint
        run: hadolint Dockerfile || true
      - name: Install ActionLint
        run: |
          BASE_URL="https://github.com/rhysd/actionlint/releases/latest/download"
          FILE_NAME="actionlint_$(uname -s)_$(uname -m).tar.gz"
          ACTIONLINT_URL="$BASE_URL/$FILE_NAME"
          curl -sSL "$ACTIONLINT_URL" | tar xz -C /usr/local/bin
          chmod +x /usr/local/bin/actionlint
      - name: Lint GitHub Actions workflows with ActionLint
        run: actionlint -color || true
